#!/usr/bin/env bash

# prints the usage message
printusage() {
    echo "Usage: $(basename ${0}) [options] url [template [name]]"
}

# prints the help message
printhelp() {
    printusage
    echo "Options:"
    echo "  -h, --help  Prints this help message."
    echo "Arguments:"
    echo "  url       A valid kattis URL (follows the regular expression"
    echo "            '^https://\w+.kattis.com(/contests/\w+)?/problems/\w+\??')."
    echo "  template  A template name or alias (from templates/). Defaults to"
    echo "            the contents of templates/.favorite."
    echo "  name      A name for the solution directory. Defaults to the name"
    echo "            of the template."
    echo "Exit codes:"
    echo "  0) Success"
    echo "  1) Unknown command-line option"
    echo "  2) Too many positional arguments"
    echo "  3) Invalid Kattis URL"
    echo "  4) No positional arguments"
    echo "  5) Invalid Kattis root directory (\$KATTISROOT)"
    echo "  6) Failed to download tests"
    echo "  7) Unknown template name"
    echo "  8) Solution name already exists"
}

# process arguments
for arg in "$@"; do
    if [ -z "${optsdone}" ]; then
        re='^-'
        if [[ "${arg}" =~ ${re} ]]; then
            if [ "${arg}" == "--help" -o "${arg}" == "-h" ]; then
                printhelp
                exit 0
            fi
            echo "$(basename $0): unknown option: ${arg}"
            exit 1
        else
            optsdone=1
        fi
    fi
    if [ -n "${solution}" ]; then
        echo "$(basename $0): too many positional arguments."
        exit 2
    fi
    if [ -n "${template}" ]; then
        solution="${arg}"
        continue
    fi
    if [ -n "${url}" ]; then
        template="${arg}"
        continue
    fi
    re='^https://\w+.kattis.com(/contests/\w+)?/problems/\w+\??'
    if [[ "${arg}" =~ ${re} ]]; then
        url="${arg}"
        problem=$(echo ${url} | cut -d'?' -f 1 | rev | cut -d'/' -f 1 | rev)
    elif [ -n "${optsdone}" ]; then
        echo "$(basename $0): not a valid Kattis URL."
        exit 3
    fi
done
if [ -z "${url}" ]; then
    echo "$(basename $0): No Kattis URL given."
    exit 4
fi

# establish KATTISROOT
if [ -z ${KATTISROOT} ]; then
    echo "No default \$KATTISROOT is set on this device."
    echo "Please enter your Kattis home directory: "
    read KATTISROOT
fi
if [ ! -d ${KATTISROOT} ]; then
    echo "$(basename $0): invalid Kattis root directory (${KATTISROOT})."
    exit 5
fi
export KATTISROOT
cd ${KATTISROOT}

# initialize python3 venv
if [ ! -d scripts/venv ]; then
    python3 -m venv scripts/venv
    source scripts/venv/bin/activate
    pip install -r scripts/requirements.txt
    deactivate
fi

# initialize problem directory
if [ ! -d problems/${problem} ]; then
    mkdir -p problems/${problem}
    cd problems/${problem}
    echo ${url} > .kattispage
    source ${KATTISROOT}/scripts/venv/bin/activate
    ${KATTISROOT}/scripts/download
    result=$?
    deactivate
    cd ${KATTISROOT}
    if [ ${result} -ne 0 ]; then
        rm -r problems/${problem}
        exit 6
    fi
fi

# use favorite template if none is set
if [ -z "${template}" ]; then
    template=$(head -n 1 ${KATTISROOT}/templates/.favorite)
fi

# resolve template aliases
if [ ! -d templates/${template} ]; then
    for template_dir in $(ls templates); do
        if grep -q "^${template}\$" templates/${template_dir}/aliases; then
            template=${template_dir}
            found=1
            break
        fi
    done
    if [ -z "${found}" ]; then
        echo "$(basename $0): unknown template '${template}'."
        exit 7
    fi
fi

# set solution name if none is set
if [ -z "${solution}" ]; then
    solution=${template}
fi
if [ -d problems/${problem}/${solution} ]; then
    echo "$(basename $0): a solution for ${problem} named '${solution}' already exists."
    exit 8
fi

# copy template and initialize solution directory
cp -r templates/${template} problems/${problem}/${solution}
cd problems/${problem}/${solution}
./template ${problem}
rm aliases template
echo "${template} template created at problems/${problem}/${solution}"
